[{"content":"github.io 주소도 좋지만 간단하고 나만의 도메인 주소를 만들어서 쓰고 싶었다.\n도메인 구매 구매 사이트 비교(.dev 도메인 비용으로 찾아봤을 때 1년 비용. 기간에 따라 더 비싸지는 곳도 있다고 한다. 구매 전 기간을 설정하고 확인하자.)\n원화 가격은 편의를 위해 만단위로 표시\n   사이트 1년 가격     google domain $12   namecheap $14.98   gandi €14.01   godaddy 2,3890₩   gabia 2,9000₩    이 중 google이니 ad, analytics 사용할 때도 편하지 않을까 하는 기대로 google domain으로 정했다. 그런데 한국은 아직 서비스 하는 지역이 아니어서 결제를 못한다는..? 안내가 있어서 포기했다. 그러다가 역시 구글링을 통해 지역을 바꾸고 진행할 수 있다는 글을 따라 무사히 결제하고 도메인을 받을 수 있었다.\n네임서버 레코드 설정    호스트 이름 유형 TTL 데이터     커스텀도메인 A 기본 185.199.108.153   www.커스텀도메인 CNAME 기본 깃헙계정.github.io    GitHub 저장소에서 도메인 설정 github.io 저장소 \u0026gt; Settings \u0026gt; Pages \u0026gt; Custom domain\n 구입한 도메인 입력 Save 조금 기다린 후 Enforce HTTPS 체크\n(설정 다시 볼때마다 체크가 풀려있는거 같은데\u0026hellip;)  🎉 완성 이제 내가 설정한 도메인을 이용할 수 있다!\n참고자료 Doc\n Hugo doc - Use a Custom Domain About custom domains and GitHub Pages Managing a custom domain for your GitHub Pages site  Blog\n 블로그 만들기 GitHub 심화 3편 - 커스텀 도메인 블로그 커스텀 도메인 등록하기  ","date":"2021-12-06T19:09:48+09:00","permalink":"https://spongebob03.github.io/p/hugo-blog-with-custom-domain/","title":"Hugo Blog with Custom Domain"},{"content":" \nSSG(Static site generator) 중 Hugo를 사용하여 블로그를 만들었다. 처음에 뭐가 뭔지 몰라서 뚱땅뚱땅 만들었다. 호스팅까지 하는데 하루 걸렸고 더 빠르게 할 수 있었지만 역시 세팅에서 시행착오를 겪었다. 그나마 Hugo여서 하루만에 할 수 있었던걸수도\u0026hellip; Hugo는 Go로 만들어져서 나중에 Go에 대해서 더 공부해보고 싶다.\ngithub.io 만들기 Hugo 설치하기 brew install hugo\nhugo version\n사이트 폴더 만들기 hugo new site blog\n테마 붙이기 태그, 카테고리 잘보이는 테마가 안보여서 그나마 stack 테마가 제일 내가 원하는 템플릿이었다.\ncd blog git init git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack config.toml파일 삭제\nGithub 저장소 연결 github.io 블로그를 호스팅하기 위해서는 깃헙 저장소 2개가 필요하다.\n blog: 블로그 컨텐츠 깃헙id.github.io: 빌드된 웹사이트  git remote add origin https://blog_저장소_주소 git submodule add -b main git@github.io_저장소_SSH주소 public ## SSH키 있어야함 블로그 사용하기 themes/exampleSite의 content 폴더 내용을 복사해와서 사용.\n 포스트 생성 hugo new post/포스트제목.md 제목은 title 항목으로 고칠 수 있다.  댓글 기능 추가 config.yaml의 comments 설정만으로 간단하게 추가할 수 있다. 깃헙계정으로 댓글을 남길 수 있는 utterances로 설정했다.\ncomments: enabled: true provider: utterances utterances: repo: 깃헙계정/깃헙계정.github.io issueTerm: pathname label: comment 로컬 서버 확인 hugo server (-D) 웹서버 실행해서 수정사항 확인\nhost on github 공식 문서\n cd blog hugo -t hugo-theme-stack cd public git add . git commit -m \u0026quot;커밋메시지\u0026quot; git push origin main -\u0026gt; 내계정.github.io에 푸시(main이 기본 브랜치명이었다) cd .. git add . git commit -m \u0026quot;커밋메시지\u0026quot; git push origin master -\u0026gt; blog 저장소에 푸시  쉘 스크립트로 업로드 자동화\n deploy.sh에 위에 매번 쓰는 커맨드를 정리 ./deploy.sh \u0026quot;커밋 메시지\u0026quot;\n이후에는 Gist, GithubAction\u0026hellip; 더 편하게 할 수 있는 방법 도전  추가할 사항  utterances로 댓글기능 추가 카테고리 사이드메뉴에 추가 GithubAction으로 자동화 hugo 기능 잘 활용하기 통계기능 추가 custom domain  https://www.holaxprogramming.com/2017/05/15/github-page-and-custom-domain/ https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages    참고 자료 Hugo 공식문서 Quick Start\nHugo로 Github.io 블로그 만들기 Hugo theme Stack doc\n초보자 Hugo 블로그 구축기 - 같은 테마를 사용하는 분의 블로그를 찾아서 더 수월했다.\n","date":"2021-12-02T22:09:48+09:00","permalink":"https://spongebob03.github.io/p/hugo%EB%A1%9C-%EA%B0%9C%EB%B0%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%A5%EB%A7%8C%ED%95%98%EA%B8%B0/","title":"Hugo로 개발 블로그 장만하기"},{"content":"1. Content-Based filtering: CB  비슷한 아이템을 기반으로 추천\n  도메인 지식 필요 아이템 간의 유사도 측정하여 추천 모든 이에게 동일한 아이템을 추천 보통 아이템, 사용자 수가 적다 hand-engineered features에서만 성능 좋음 텍스트 처리 필요하기도 함(NLP) - 예.작가의 다른 책  핵심\n 아이템들을 어떤 정보를 기준으로 서술할 건가 유사소 계산 방법 정하기 (코사인, 피어슨\u0026hellip;)  2. Collaborative Filtering: CF  기본적으로 다른 사용자들의 정보를 이용하여 취향 예측\n 1) 메모리 기반 (=Nearest Neighbor based CF) - 👨‍👩‍👧‍👦 사용자 기반 나와 비슷한 평점 패턴을 보이는 사람들을 찾아서 그 사람들이 높게 평가한 아이템 추천\n 나와 다른 사람 어떻게 표현할 것인가 나와 비슷한 사용자를 어떻게 찾을지가 중요  사용자 프로파일 정보 구축 프로파일 정보간의 유사도 계산    - 🎨 아이템 기반 아마존에서 논문으로 발표 유사도 비교 → 평점의 패턴이 비슷한 아이템들을 찾아서 그걸 추천하는 방식 아이템의 수가 보통 사용자 수보다 적다 → 평점의 수가 평균적으로 더 많고 계산량이 작다 → 사용자 기반보다는 덜 sparse → 사용자 기반 협업 필터링과 비교해 더 안정적이며 좋은 성능을 보임\n2) 모델 기반  넷플릭스 프라이즈 컨테스트 때 고안된 추천 방식 사용자 아이템 행렬에서 비어있는 평점들을 SGD를 사용해서 채우는 방식 SVD(Singular Vector Decomposition)을 사용해서 구현  요즘은 딥려닝의 오토인코더를 사용   평점을 포함한 다른 사용자 행동을 예측하는 방식으로 진화  3) 사용자 행동 기반  사용자 행동(아이템 클릭 or 구매 등) 정보를 기반으로 추천  사용자, 아이템에 대한 부가 정보 필수 구현 간단하지만 아주 유용   사용자 행동을 예측하는 추천 (클릭 or 구매)  모델링을 통해 사용자와 아이템 페어에 대한 클릭 확률 등의 점수 계산 가능  의사 결정 트리나 딥러닝등이 사용 가능 유데미에서 사용했던 방식      4) Latent Factor CF 사용자-아이템 평점 행렬 데이터만을 이용해 말 그대로 \u0026lsquo;잠재 요인\u0026rsquo;을 끄집어 내는 것\n Matrix Factorization 우연한 추천 기능  3. 다수의 알고리즘: 다양한 방식 조합 4. 지도학습 방식 어떤 기준으로 추천을 하느냐가 가장 중요 - 머신러닝의 레이블 정보!\n힌트\n 명시적 힌트: 리뷰점수, 좋아요 암시적 힌트: 클릭, 구매, 소비  클릭보다는 구매가 더 좋은 힌트, 소비 여부도 좋은 힌트다 클릭은 노이즈가 있지만 장점은 관심없는 아이템들의 파악이 쉽다 자세한 사용자 행동 정보의 수집, 저장과 가공 먼저 필요    ","date":"2021-11-19T22:09:48+09:00","permalink":"https://spongebob03.github.io/p/%EC%A3%BC%EC%9A%94-%EC%B6%94%EC%B2%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/","title":"주요 추천 알고리즘"},{"content":" 사용자가 관심있어 할만한 아이템을 제공해주는 자동화된 시스템\n  핵심  관심을 어떻게 표현하는가? 관심을 어떻게 측정하는가? =\u0026gt; 유사도 측정    사용자와 아이템  사용자: 서비스를 사용하는 사람 아이템: 서비스에서 판매하는 물품(다른 사용자가 물품이 될 수 있음) 보통 서비스가 성장하면 사용자, 아이템의 수도 같이 성장함  특히 사용자의 성장도가 훨씬 커짐   하지만 아이템의 수가 커지면서 아이템 디스커버리 문제가 대두  모든 사용자가 검색(능동적)을 하지 않으며 사람들이 점점 더 추천(수동적) 선호    필요성  조금의 노력으로 사용자가 관심있어 할만한 아이템을 찾아주는 방법  아이템의 수가 굉장히 큰 경우 더 의미가 있다 수작업으론\u0026hellip;도저히 불가 → 자동화 필요! 개인화(Personalization)으로 연결됨 확증편향의 문제가 있을 수 있다  가끔씩 전혀 관심없을 듯한 아이템도 추천 가능(Serendipity)     회사 관점에서는 추천 엔진을 기반으로 다양한 기능 추가 가능  마케팅시 추천 엔진 사용(이메일 마케팅) 관련 상품 추천으로 쉽게 확장 가능   아이템 수가 많아서 원하는 것을 찾기 쉽지 않은 경우 ⇒ 검색을 위한 수고를 덜어줌 추천을 통해 신상품등의 마케팅이 가능해짐  새로 나온 아이템들은 노출 자체가 어려운데 추천을 통해 기회를 줄 수 있다   인기 아이템 뿐만 아니라 롱 테일의 다양한 아이템 노출이 가능  추천 방식에 따라 다르지만 개인화가 잘 되면 이게 가능해짐    추천은 매칭 문제!  사용자에게 맞는 아이템을 매칭해주기  아이템은 서비스에 따라 달라지며 아이템이 다른 사용자가 될 수도 있음 (친구 추천, 강의 추천\u0026hellip;)   어떤 아이뎀을 추천할 것인가?  다양한 방법이 존재  지금 뜨는 아이템 추천(개인화되어 있지 않음) 사용자가 마지막에 클릭했던 아이템들 다시 추천 사용자가 구매했던 아이템들을 구매한 다른 사용자들이 구매한 아이템 추천 ← 협업 필터링     추천 UI도 굉장히 중요  추천 유닛 존재. 일르 어떤 순서로 어떻게 노출하는지가 중요 구체적인 이유를 보여주는 것이 좋다   사용자와 아이템에 대한 부가 정보들이 필요해짐 아이템 부가 정보  분류 체계 태그 형태로 부가정보를 유지하는 것도 아주 좋음   사용자 프로파일 정보  개인정보: 성별, 연령대 → 콜드 스타트 문제 해결 아이템 정보:  관심 카테고리와 서브 카테고리(분류체계 기반), 태그 클릭 혹은 구매 아이템     무엇을 기준으로 추천을 할 것인가?  일상에서 볼 수 있는 추천  아마존 관련 상품 추천 키보드 샀다면 → 같이 쓸 마우스 추천 넷플릭스 영화, 드라마 추천 이전에 봤던 작품 → 다른 드라마, 영화 추천 추천 타이틀: 이 작품들 왜 추천하는지 구글 검색어 자동 완성 편리, 내가 생각하지 못했던 정보로도 검색할 수 있어서 개인정보 이슈가 있었다 링크드인 or 페이스북 친구 추천  사용자: 멤버 아이템: 멤버 왜 추천하는지 이유를 보여준다   스포티파이 노래, 플레이리스트 추천 헬스케어 도메인의 위험 점수 계산 사용자: 의사, 간호사 아이템: 환자 어느 환자를 먼저 치료하는게 좋은지 점수로 수치화  → 공통점  격자 형태 UI 사용 다양한 종류의 추천 유닛 존재  일부 유닛은 개인화 일부 유닛은 인기도 등 비 개인화 정보기반 추천 유닛의 랭킹 중요  이 부분도 모델링하여 개인화하는 추세 클릭을 최적화하고 이 데이터 수집을 위한 실험을 함  순전히 데이터 수집을 위한 온라인 테스트        ","date":"2021-11-09T22:09:48+09:00","permalink":"https://spongebob03.github.io/p/%EC%B6%94%EC%B2%9C%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%B4%EB%9E%80/","title":"추천시스템이란?"},{"content":" Github) PyTorchKR\n nvm: command not found 노드 버전관리 설치 및 사용법\n find ~/.zshrc로 /.zshrc파일 있는지 확인 open ~/.zshrc 파일 열어서 아래 내용 추가  export NVM_DIR=~/.nvm source $(brew --prefix nvm)/nvm.sh source ~/.zshrc 코드 적용 nvm \u0026ndash;version으로 확인  rbenv: version `2.5.9' is not installed brew install rbenv했지만 [이걸 또 m1이..?] (https://github.com/rbenv/ruby-build/issues/1691) 해결 방법은 간단했습니다. rbenv install 2.5.9\nERROR: While executing gem\u0026hellip;Gem::FilePermissionError Mac에서 Gem::FilePermissionError 에러 발생시 해결 방법 ~/.zshrc 파일에 아래 내용 추가\n[[ -d ~/.rbenv ]] \u0026amp;\u0026amp; \\ export PATH=${HOME}/.rbenv/bin:${PATH} \u0026amp;\u0026amp; \\ eval \u0026quot;$(rbenv init -)\u0026quot; source ~/.zshrc로 코드 적용\nbundle install 에서 make: yarn: No such file or directory npm install -g yarn\n빌드 make serve   멘토님의 친절한 커맨드 예시와 오늘도 구글링으로 얻은 정보들에 감사하며\u0026hellip;🥳\n","date":"2021-08-16T22:09:48+09:00","permalink":"https://spongebob03.github.io/p/%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98-%ED%97%88%EB%B8%8C-m1-%EB%A1%9C%EC%BB%AC%EC%97%90%EC%84%9C-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B8%B0/","title":"파이토치 허브 M1 로컬에서 빌드하기"},{"content":"스터디에서 4주 동안 배운 알고리즘 유형 문제를 정해진 시간에 풀어보는 모의 코딩테스트를 진행하고 싶었다. 백준 문제를 배운 알고리즘 내에서 랜덤으로 출제하는 슬랙 챗봇을 사용하면 재밌을거 같았다. 백준 사이트는 웹 스크래핑이 금지된다고 공지가 되어있어 solved.ac의 알고리즘 유형 카테고리 정보를 긁어오는 식으로 문제를 뽑아왔다. 혹시 이것도 문제가 되는지 문의해봐야겠다\u0026hellip;\n사용 라이브러리  BeautifulSoup slack_sdk  데이터 긁어오기  \n출제 유형 랜덤 선택, 문제 랜덤 선택 tag의 랜덤 범위가 5인 이유는 5개 알고리즘을 배워서\u0026hellip;  \n슬랙에 텍스트 보내기 Slack api \u0026gt; create app Sending messages 문서 원래 slacker 모듈을 사용했는데 적용이 안되어서 찾아보니 21년부터 slacker는 지원하지 않고 slack_sdk 패키지를 사용하는 것 같다.  \n문제 상황 🤔 백준 사이트는 지나치게 많은 트래픽을 발생시키는 경우에는 사이트 이용이 정지된다고 합니다. 백준 사이트가 아닌 solved.ac의 알고리즘별 문제 목록을 긁어오는 것도 그래서인지 여러번 실행하면 아무 정보가 들어오지 않는다. 하지만 solvedac인데 왜..?\n개선해야할 점 지금 상태는 파이썬 코드를 직접 실행시켜야 슬랙 챗봇이 실행된다. 파이썬 메인함수에서 스터디 기간동안 배운 알고리즘 유형들을 solved.ac에 있는 tag이름으로 찾아서 써줘야한다. 외부에서 간단하게 입력할 수 있었으면 좋겠다. 또한 다른 슬랙 앱처럼 슬랙에서 바로 실행시킬 수 있도록 할 필요가 있다.\n[참고 사이트] https://yganalyst.github.io/web/slackbot1/ https://corikachu.github.io/articles/python/python-slack-bot-slacker https://github.com/os/slacker\nhttps://api.slack.com/authentication/oauth-v2 https://developerdk.tistory.com/96 슬랙커가 안먹히는 이유 https://api.slack.com/methods/chat.postMessage/code https://slack.dev/python-slack-sdk/v3-migration/index.html#from-slackclient-2-x https://pypi.org/project/slack-sdk/\nhttps://pythonrepo.com/repo/slackapi-python-slack-sdk-python-third-party-apis-wrappers\nhttps://github.com/slackapi/python-slack-sdk/issues/561\n","date":"2021-08-08T22:09:48+09:00","permalink":"https://spongebob03.github.io/p/slackbot%EC%9C%BC%EB%A1%9C-%EB%9E%9C%EB%8D%A4-%EB%AC%B8%EC%A0%9C-%EC%B6%9C%EC%A0%9C/","title":"SlackBot으로 랜덤 문제 출제"},{"content":"Homebrew? 그냥 사이트에서 다운받는거랑 뭐가 다른가요?\nmacOS용 패키지 매니저로 프로그램 설치, 업데이트, 삭제를 편하게 관리할 수 있다. (하지만 윈도우만 쓰던 나는 나중에 알았다..)\nM1 네이티브로 설치하려 했으나..실패! 그냥 뭔가 커맨드가 안먹혀서 의문이었는데 기존 MAC을 위한 안내는 기존 실리콘칩. 내 컴퓨터는 m1칩이라 그런 것이었다.\n🛠해결 M1 네이티브로 설치하는 방법도 있으나 이전 맥 터미널과 동일하게 호환할 수 있는 Rosetta를 사용하는 방법이 제일 간단했다.\n 터미널앱 \u0026gt; 정보 가져오기\u0026gt; ☑️ Rosetta를 사용하여 열기 Homebrew 설치 /bin/bash -c \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026quot;  참고\n설치하기 이전에 이걸 봤어야 했는데\u0026hellip;\n","date":"2021-06-08T22:09:48+09:00","permalink":"https://spongebob03.github.io/p/macmini-m1-%EC%97%90%EC%84%9C-homebrew-%EC%84%A4%EC%B9%98/","title":"MacMini M1 에서 Homebrew 설치"},{"content":"코로나 이\u0026hellip; 미친 코로나 때문에\u0026hellip; 1년이 날아간 기분이다. 주어진 처지에서 최선을 다했으니 후회는 없지만 그래도 아쉬움이 없는 것은 아니다.\n졸업 프로젝트 졸업 프로젝트때 되면 선배들처럼 엄청난걸 척척 해낼 줄 알았다. 하지만 나는 여전히 똑같았다\u0026hellip; 더군다나 코로나로 대면수업도 못하는데 팀 프로젝트를 진행하려니 심란했다. 그나마 다행인건 친한 동기들과 해서 모임 약속 잡는게 수월했다. 프로젝트 하면서 내 이상과 현실이 같지 않아서 마치 더닝크루거 그래프의 절망의 계곡에서 허덕였다. 화상 회의 프로그램을 잘 활용하는 것이 코로나 속에서 팀플하는 사람에게 미덕이 될 수 있었다. 협업 툴을 내가 좀 더 잘 다룰 수 있었다면 협업할 수 있었을 거같다. 계획을 가지고 찬찬히 공부했다면 좀더 헤메지 않았을거 같지만 조급하고 막막했다.\n심리학 생리심리학을 공부하면서 뇌구조에 배웠다. 뇌는 정말 흥미롭다. 전뇌, 중뇌, 후뇌\u0026hellip;전두엽, 두정엽, 측두엽, 후두엽\u0026hellip;전전두피질, 연합피질 등 뇌의 세부적인 부위와 그 기능을 알 수 있었다. 제제교수님 안식년 가시기 전에 강의 다 들어두려고 수강신청도 성공하고 재밌게 공부했던 것 같다. 강의 ppt는 가로측으로 넘기는거라 상하관계가 잘 정리되지 않아서 노션 토글버튼으로 편하게 필기(?)하면서 복습했다. 뇌를 공부하면서 인간의 사고방식과 컴퓨터 동작 구조와 유사한 점이 많았다. 아마 인지심리학의 접근법이 컴퓨터과학과 비슷하기 때문이라 생각한다. 학습심리학은 머신러닝에도 쓰이는 이론들이 많아서 재밌었다. 하지만 시험이 즐겁진 않았다\u0026hellip;\n학문은 다 연관되어 있다. 모든 분야는 다른 분야를 발전시킬 수 있다🌱\n","date":"2020-12-30T14:58:14+09:00","permalink":"https://spongebob03.github.io/p/2020%EB%85%84-%ED%9A%8C%EA%B3%A0/","title":"2020년 회고"},{"content":"운동🏃 태권도. 8월까지 방학에는 태권도장에 다니면서 처음보다 확실히 좋아졌다. 하지만 학기 중에 운동을 위해 집에 자주 오는 것도 부담되서 2학기에 소모임을 만들어 주 3회 운동하려고 했으나\u0026hellip;모임을 지속적으로 유지하는 것도 쉽지 않았고 내가 유단자가 아니어서 역량도 없는 상태였다. 회비를 걷지 않고 자율적인 참여여서 참여율은 많이 떨어졌지만 금전 문제가 없는 것이 차라리 다행이었다. 이렇게 부족한 소모임 운영이었지만 참여해준 모든 모임원들에게 정말 고마울 뿐이다. 특히 그냥 모임원이었는데 운영자보다 더 많은 부분 맡아야했던 다른과 후배님,,,나와 같은 초급자들 기본자세, 품새를 가르쳐줬다. 같이 운동하는게 즐거워서 하는 사람을 만나서 좋았던 기회였다. 막판엔 거의 못했지만 지속적으로 한 운동은 수영 이후로 처음이다. 체력에 대해서 많이 필요하다고 생각했던 한 해였고 체력을 기르기 위해 나름의 노력을 했는데도 어려웠다. 아쉬움이 더 많이 남는다. 이번에 6개월 꾸준히 했던 거라면 내년에는 12개월을 꾸준히 운동하고 그렇게 된다면 태극5~8장도 잘하게 된 상태를 만들고 싶다.\n학교 1학기는 휴학하는 동안 무엇을 공부하고 싶은지 정하고 공부가 필요하다는 생각이 있어서 힘들지 않았다. 통학하다 기숙사에 들어갔더니 2시간에서 10분으로 줄어든 통학시간을 만끽할 수 있었다. 반면 2학기는 태권도 소모임 진행도 일주일에 2번 이상이고 튜터링으로 3학점 수업을 8개 듣는 느낌이었다. 계획도 부실했고 시간을 관리하는 모습이 아니라 시간이 미친듯이 달려 내가 이리저리 휘둘리는 기분이었다. 특히 화,목 하루 4연강에 기말고사만 시험보는 과목이 4개였는데 다시는 그런 선택을 하고 싶지 않다\u0026hellip;\n심리학 심리학을 공부하기로 한 것은 인간의 사고과정이 어떻게 작동하는지 알 수 있다면 인공지능을 공부하는데 도움이 될거 같아서 선택하였다. 그리고 내 기분이 형성되는 과정이 어떤 생물학적 성분과 연관되는지 배우는 것도 재밌어 보였다. 아직 5과목 들어본 상태지만, 적성에 잘 맞는 것 같다. 심리학과는 학점따기 많이 힘들다고 들어서 두려웠지만 도전한 것이 답이었다. 3학년때 심리학 전공을 듣기 시작해서 복수전공은 시간적으로 어려워 부전공으로 공부하지만 늦게라도 내가 정말 공부하고 싶었던 것을 찾아서 행운이다. 물론 공부하다가 힘든 점은 있었다. 전공 공부보다 적성에 맞는다고 해서 그 학문이 쉽다는건 절대 아니었다. 다른 타입의 어려움을 많이 느꼈던 2학기였다.\n활동   머신러닝 스터디: 휴학하는 동안 빅데이터, 블록체인, VR\u0026hellip; 새롭게 나오는 개념들을 얕게만 배웠는데 머신러닝은 배워보지 않은 부분이었다. 구글에서 제공하는 스터디잼을 신청해서 코세라, 콜랩을 이용할 수 있었는데 몰아서 듣느라 잘 활용하지 못했다. 통계 그래프 설명이 있었는데 상관계수(correlation coefficient), 회귀분석(regression)라는 용어도 잘 몰랐다. 심리통계연구법 강의를 듣고 나서야 알 수 있었다. 내년에도 구글 스터디잼이 열렸으면 좋겠다. 아는 만큼 들리는 거였나 보다.\n  와이즈센터 교육봉사: 1학기, 여름방학에 영등포 여고로 가서 코딩실습 수업을 돕는 활동이었다. 고3이 이렇게 밝을 수 있다는 것을 처음 봤다. 대학교 1학년때 들었던 실기 수업보다 더 유익한 수업이었다. 나도 코딩을 이렇게 처음 접했더라면\u0026hellip;이라는 헛된 생각을 했었다.\n  튜터링: 기존 학과 튜터링이었으면 나는 학점미달로 신청도 못했을거다. 하지만 파이썬으로 튜터도 공부하면서 따라갈 수 있다고 되어있어 도전했다. 운이 좋게(?) 인원 미달이었고 2명의 튜터가 한 반씩 맡아 과제시간을 진행했다. 개념을 가르치는 것보다는 매주 과제가 나오면 후배들의 질문에 필요한 파이썬 개념이나 함수들을 알려주거나 에러메세지를 읽고 답해주는 일이었다. 수업을 준비하면서 더 많이 배웠다. 초반에는 내가 문제 풀면서 어려운 점이 없어서 널널하게 갔다가 질문이 많아 당황한 적이 있었다. \u0026lsquo;소수 구하기\u0026rsquo;, \u0026lsquo;반복문 예제\u0026rsquo;들을 반복해서 풀었던 경험이 있어 자동을 풀었던 거지만 그 문제를 처음 봤을 때는 낯설고 어려웠던 것을 잊었던 것이다. 이후에는 교수님이 보내주신 수업 피피티와 문제들을 푸는 것은 짧았지만 질문을 예상하고 어디에 중점을 둬서 설명할지, 더 쉽게 알려주고 싶어서 연습했다. 매주 튜터링이 끝나고 더 잘 설명하지 못한게 아쉽고 다음주에는 더 준비해야겠다는 생각이 들었다. 열심히 하는 후배들을 보면서 뿌듯하면서도 이 친구들의 시작이 내 시작보다 좋다는 부러움, \u0026lsquo;1학년때 질문하는 것을 왜 그리 어려워했을까\u0026rsquo; 후회했다. 당시에는 남들은 다 빨리 푸는데 나는 아직도 앞에 문제도 못 풀고 질문하는게 무의식적으로 부끄러워 알아서 해결하려고 했고 제대로 질문하는 것도 몰랐고 대답을 들어도 이해를 못했다. 막상 선배로서 질문을 받아주는 역할이 되니 질문을 많이 하는 후배가 귀찮은게 아니라 나도 질문을 받으면서 더 많이 알아갈 수 있는 기회였다. 문제에 직면했을때 자신이 어떤 시도를 해봤고 결과가 나온 것에서 나아가기 위해서 무엇이 필요한지 묻는 질문에는 칭찬을 하고 싶었다. 튜터링을 하면서 여러사람이 쓴 코드를 볼 수 있었고 에러메시지를 읽고 문제 부분을 먼저 파악하고 빠르게 각 변수, 함수가 무엇인지 보고 에러를 찾는 과정은 일종의 순발력을 키울 수 있는 시간이었다. 끝으로 파이썬을 표현하자면 \u0026lsquo;이게 되네..?!\u0026lsquo;였다.\n  모각코: 10월부터 12월까지 매주 토요일 9시에 강남에 모여 각자 코딩하는 시간이었다. 기숙사 급식 챗봇을 카카오톡으로 만드는 것이 목표였다. 하지만 카카오플러스가 유료화 된 시점이었고 다른 메신저에 크롤링한 결과를 보내는 것이 생각만큼 간단하지 않았다. 초반 작업만 빨랐고 그 다음부턴\u0026hellip; 그래도 개발직군에서 일하는 분들을 가까이 만날 수 있는 기회였고 다들 좋은 분들이었다. 목표가 있고 그것을 위해 구체적인 노력을 쏟는 사람들이 모인 자리에서 많은 에너지와 정보를 얻을 수 있었다. 나 혼자였으면 몰랐을 기술 서적, 세미나, 좋아보이는 개발자 문화에 대해 알 수 있었다. 수업이나 과제때문에 하는 개발이 아니라 내가 필요해서, 해보고 싶어서 하는 코딩이 재밌다는 것을 처음 느꼈다. (지속기간 3주였지만..)\n  세미나  우먼테크메이커스 슬기로운 인턴 생활 플러터 위민후코드 연말 파티  느낀 점 시간이 정말 빠르다. 올해의 가장 중점은 휴학 생활이 끝나고 학교로 돌아가 학교 공부에 집중하는 거였다. 학교를 다니면서 수업을 듣고 과제를 하고, 시험만 보는데도 정신 없었고 어느새 1년이 마무리 되었다. 학점관리는 원하는 만큼 나왔는데 다시 생각해보니 강의에서 수업이상으로 추구하는 의미가 있는데 당시 나는 성적에 얽매여서 그 의미를 제대로 보지 못했던 것 같다. 그만큼 좋은 강의를 들었던 학기였다. 올해 가장 큰 수확은 기숙사에 들어간 것과 아이패드이다. 기숙사는 그동안 통학했던 내 고통이 보상받는 기분이다. 아이패드는 노트북만큼 좋다. ios는 처음 사용하는데 더 편한 기능들도 있고 새로운 앱 보는 것도 재밌다.\n내년엔  운동: 태권도 꾸준히 졸업 프로젝트 잘 끝내기 인턴 책 50권  ","date":"2019-12-31T14:58:04+09:00","permalink":"https://spongebob03.github.io/p/2019%EB%85%84-%ED%9A%8C%EA%B3%A0/","title":"2019년 회고"},{"content":"Memory Process 단기기억의 부호화  Conrad 실험 : 발음 비슷한 다른 글자 혼동→자극 시각적으로 제시되었어도 기억 오류 청각적 혼동 가능성있다  결론 : 자극이 시각적이든 청각적이든 단기기억 부호화할때 청각적 코드 사용   Baddeley : 의미정보는? 실험 1 : 유사한 소리 나는 단어들 / 소리 구별되는 단어들 → 유사한 소리 헷갈림 실험 2 : 의미 유사 단어 / 의미 차이 자극 → 별 차이 없음  결과 : Conrad가 맞네\u0026hellip;   Shulman 실험 : 청각적으로 유사(Bawl,Ball) / 의미상 유사(Talk,Speak) / 리스트에 있는 단어  결과 : 둘다 비슷하게 나옴 → 청각적 부호화 의미 부호화 모두 사용됨   Posner \u0026amp; Keele 실험 : 두 개의 글자 같은 글자인가 판단 A-a : Yes로 대답 \u0026lt; A-A : Yes로 대답시간 더 빠름  결과 : 시각 부호화도 안쓰는건 아니다    결론 : 주로 청각 부호화. (시각적 부보화, 의미 부호화도 과제에 따라 일부 사용)\n장기기억의 부호화 주로 의미부호화. 정보에 맞게 융통성 있게\n Grossman \u0026amp; Eagle\n실험 : 의미가 비슷한 방해자극에 더 많은 오경보  결과 : 단어의 의미가 비슷할 때 혼동 가능성 더 크다 → 의미 부호화   Bousfield\n실험 : 동물15/ 직업15/ 채소15/사람이름15 뒤섞어서 제시 후 자유 회상  결과 : 같은 범주에 속한 단어들을 연속적으로 회상할 확률 더 높다 → 단어들을 의미에 따라 범주로 묶어서 저장한 후 인출한다는 증거   Frost\n실험 : 그림 자극 이용. (의미 범주, 시각 범주(방향)) 조작 후 자유 회상  결과 : 의미 정보 뿐 아니라 시각 정보도 부호화한다   Rubin\n실험 : 청각부호(멜로디) 이용 글(가사) 암기  단기기억(STM) → 장기기억(LTM)  how?  Attention(주의) Consolidation(응고화, 공고화) 기존에 알고 있던 지식을 새로운 정보와 연관시켜 의미부여 할 수 있는거 Metamemory(상위기억) 안다는 것을 아는 것. Rehearsal  유지 되뇌기 : 단순한 기계적 되뇌기 → 효과가 적음 정교화 되뇌기 : 상호 의미 있게 연결하거나 기존의 정보에 통합 → 효과적 Ebbinghaus: 분산학습이 정보를 장기기억에 저장하는데 더 효과적임 Bahrick \u0026amp; Phelps: 학습 회기의 시간 간격이 길수록 학습 내용 더 오래 기억   분산학습 다양한 맥락에서 학습 가능   방해  interference (간섭) decay (소멸)    정보 체제화   기억술\n 범주 묶기 상호작용 이미지 생성 쐐기 단어법 장소법 머리글자로 단어 말들기 머리글자로 문장 만들기 핵심단어법 Roediger 기억술 효과는 인출시 필요한 정보에 따라 다르고 사람마다 다르다. 자유회상, 계열회상 : 상호작용 이미지 만들기, 장소법, 쐐기 단어법 효과 \u0026gt; 개별적 심상화 → 계열 회상에서 기억술 효과 더 크게 나타남 (제약조건 있기 때문에)    기억의 조직화\n  이해와 기억\n  부호화\n  Retrieval 인출   단기 기억의 인출 Retrieval in STM\n 병렬 vs 순차 전체적 vs 자기종료적    Sternberg 실험 : 숫자기억 탐지 숫자(probe) 제시 → 과제 → 반응시간 측정\n 얼마나 많은 숫자 기억했는가 (자극 세트의 크기) probe이 기억 리스트에 있었는가 있었다면 리스트에서 몇 번째에 있었는가   결과 : 전체적 순차 처리 관찰    Corcoran 병렬처리도 들어갈 수 있지 않나? → 증명 어렵\n  Tulving \u0026amp; Pearlstone 실험 : 범주화된 단어 목록 제시 테스트1 : 자유회상-순서에 관계없이 단어 회상 (인출) 테스트2 : 각 범주 이름을 단서로 제시 결과 : 단서 회상 \u0026gt; 자유 회상 → 회상 과제에서의 차이는 기억의 실패가 \u0026lsquo;저장\u0026rsquo;보다는 \u0026lsquo;인출\u0026rsquo; 실패임을 암시\n    장기 기억의 인출 순차, 병렬처리 모델이 공전하는 것으로 받아들여지고 있음. 과제와 사용되는 자극에 따라 달라짐\n Bowers, Clark, Lesgold \u0026amp; Winzenz 실험 : 인출에 미치는 범주화의 영향  결과 : 조건1 (무작위 리스트) \u0026lt; 조건2 (범주화 리스트)      인출 실패 Why?\n 간섭이론   Brown-Perterson paradigm 실험 : 세게의 낱자로 이루어진 문자열 제시→ 3,6,8,12,15,18초 지났을 때마다 회상 검사 방해 : 지연시간 동안 무작위 3자리 숫자 제시, 3씩 빼는 과제 실시\n 결과 : Rehearsal 못하게 했을 때 18초 후에 거의 망각 → 숫자 빼기 과제가 단기기억에서의 회상 방해. 단기기억의 망각이 간섭 때문이라는 증거    종류\n 역행 간섭 : 이전 학습 내용 ←방해- 다음에 하는 활동 순행 간섭 : 앞서 제시 된 자료 -방해→ 이후의 학습 -부호화 시점과 인출 시점간 간격이 클 수록, 사전학습이 증가할수록 순행 간섭 증가 -학습하는 정보의 종류가 달라지게 될 경우 → 순행간섭해제    계열위치곡선\n 초두효과- 역행간섭을 받지만 순행간섭이 없음 최신효과- 순행간섭을 받지만 역행간섭이 없음     소멸이론 기억은 대체되는 것이 아니라 점차 사라진다는 입장\n실험적 검증 어려움. ← 학습을 방해하지 않으면서 Rehearsal만 못하게 하는 과제 사용해야 함  Reitman 실험 : 5개 단어 각 2초씩 제시. 15초간 음 탐지 과제 실시(간섭 일어나지 않는 과제)→ 단어 회상  결과 : 평균 약 25% 회상률 감소   Berman, Jonides \u0026amp; Lewis 실험 : 4개의 표적단어 제시 → probe 단어 제시 → probe이 표적단어 중 하나와 일치하는지 판단. 반복\nprobe :\n-(1)완전히 새로운 단어일 때 판단시간 : baseline\n-(2)비교적 최근 시행에 나온 단어와 일치할 때 : baseline + 50~100ms (간섭 효과)\n-(3)더 오래된 시행에 나온 단어와 일치할 때 : (2)보다 판단지연시간 짧음. Why?\n→ 지나간 시행에 대한 단어는 rehearsal할 필요가 없음→ 소멸 가능성 큼 (소멸 효과)    간섭이 대부분의 망각 현상을 설명\n기억의 구성적 특성  다양한 책략을 사용해서 학습내용이나 경험 재구성 사전 경험이 정보의 회상 방식, 내용에 영향을 준다 → 구성적(constructive) 특성 Bransford \u0026amp; Johnson : 읽은 내용이 \u0026lsquo;세탁\u0026rsquo;과 관련있다고 알고 있을 때 읽은 글 잘 기억함\nBartlett : 북미 인디언 설화 읽게 함 → 자기 마음대로 왜곡하여 글 회상\n→ 핵심 정보는 잘 회상하지만 이해하지 못하거나 애매한 정보들은 망각\n→ 사전 지식과 기대가 회상에 영향을 미침  자전기억 Autographical Memory 일화기억\n일반적으로 매우 우수\n인생의 시기에 따라 기억의 정도가 다름 (중년의 경우 최근 일보다 성인기 초기나 청년기 때를 더 잘 기억)\n자존감에 따른 자전 기억\n 긍정적 자존감 : 긍정적 사건을 더 잘 기억 부정적 자존감 : 부정적 사건을 더 잘 기억  섬광기억 매우 강력해서 사진을 찍어놓은 것처럼 선명한 사건의 기억\n-why?\n수반되는 정서의 강도가 강하기 때문\nRehearsal 반복의 효과 때문 (충격적 사건의 경험을 자주 말하거나 회상하는 경향이 있다)\n지각적으로 풍부한 정보를 주기 때문\n-처리 과정은 일반 기억과 다른가?  Yes :Brown \u0026amp; Kulik\n매우 충격적인 사건에 의해서만 활성화되는 과정\n사건과 관련된 부분들에 대해서는 영구적 기록을 만들어낸다\n과거의 위협적 사건에 대한 기억을 통해 미래의 위험을 피하도록 하는 생존 기능 No : Neisser \u0026amp; Harsch\n다른 기억과 마찬가지로 오류와 망각 발생  -정확한가? 기억의 정확도에 대한 확신은 강하지만, 실제로 다른 기억보다 더 신뢰할 수 있는지는 의심\n기억 왜곡 기억의 구성 및 재구성 → 기억 왜곡으로 변질 될 수 있음\n  Schacter\n 일시성 : 기억은 신속하게 사라짐 방심 : 주의를 주지 않은 사건 기억 못함 차단 : 기억해야 하는데 기억이 나지 않는다 (TOT) 오귀인 : 읽거나 들은 내용의 출처를 기억하지 못함 (본 적 없는데 봤다고 함) 피암시성 : 외부에 의해 기억 조작. 어떤 것을 보았을 것이라는 암시 받으면 본 것으로 기억 편향 : 회상의 내용이 편향되는 경향 지속성 : 하찮은 일이나 별로 기억하고 싶지 않은 일 심각한 것으로 기억 (단 한번의 실패)    목격자 증언 목격자들이 기억을 복습할 떄 오류의 가능성이 매우 높다\n특정 사건에 대한 기억은 사건 이후에 습득된 정보에 의해 왜곡되기 쉽다 (오정보 효과)\n  Loftus \u0026amp; Palmer\n실험 : 두 차가 충돌하는 사고 장면 → 질문 단어: \u0026ldquo;박살났을 때\u0026rdquo; \u0026gt; \u0026ldquo;충돌했을 때\u0026rdquo;\n→ 단순히 한 단어를 바꾸는 것만으로도 인출이 영향을 받을 수 있음\n  Loftus, Miller, Burns\n목격 사건과 왜곡 정보간 간격이 증가할수록 왜곡이 더 쉽다\n최초의 기억 흔적이 시간경과와 함께 약해지고 다른 출처에서 온 정보들로 빈틈이 채워지기 때문\n  Read, Connolly \u0026amp; Turtle\n암시 효과로 인해 완전히 잘못된 기억이 만들어질수 있다\n가상의 장면이나 사건에 대해 시각적 심상을 떠올리라는 지시문 → 가짜 기억 생성 가능\n  Ceci \u0026amp; Bruck\n아동이 어릴수록 증언의 신뢰도는 더욱 낮아짐\n타인의 암시를 자기의 기억으로 믿는 경우가 많다\n  Kovera \u0026amp; Borgida\n목격자가 스트레스를 받는 상황에서 범죄를 목격할 때 오류 발생 가능성 높아진다\n  Roebers \u0026amp; Schneider\n사회적 압력이 있는 경우 목격자가 오류를 범할 가능성 높아진다\n    ##기억의 맥락효과 개인이 가진 도식(schema) : 인지적 맥락 형성 → 새로운 정보의 통합과 조직화\n정서 : 부호화 맥락 형성 및 인출에 영향\n Baddely\n기억과 우울증) 우울증의 지속 ← 과거의 슬픈 경험을 더 잘 기억해서 Godden \u0026amp; Baddeley\n실험 : 16명의 잠수부 : 40개의 단어 목록 (집단1-수심 6미터에서 암기/ 집단2- 물 밖에서)  결과 : 학습 장소와 동일한 장소에서 회상을 할 때 정확도 높아짐    부호화 특정성 기억항목을 어떻게 부호화했는지에 따라 해당 항목이 어떻게, 얼마나 잘 인출되는지 결정\nTulving : 기억정보와 함께 (물리적,정서적)맥락을 부호화한다\n기억상실증 Amnesia 외현기억의 심각한 손상\n 역행성 기억상실증\n심한 충격을 받기 전에 있었던 사건들의 기억(외현기억)을 잃어버리는 증상 순행성 기억상실증\n사고 이후 새로운 기억을 형성하지 못하는 증상 외현기억 : 매우 저조한 수행 암묵기억 : 정상 수준 수행\n절차적 기억 과제에서는 학습에 의한 향상 보임  ","date":"2019-10-02T22:09:48+09:00","permalink":"https://spongebob03.github.io/p/memory-process-%EA%B8%B0%EC%96%B5-%EA%B3%BC%EC%A0%95/","title":"Memory Process 기억 과정"},{"content":"Basic process  Encoding 감각정보를 심적 표상으로 변형하여 기억속에 저장하는 과정 Storage 부화화된 정보를 기억속에 유지하는 과정 Retrieval 기억 속에 저장된 정보를 끄집어 내어 사용하는 과정  Explicit memory (외현기억) 의식 수준에서의 기억 회상과제, 재인과제 모두 외현기억을 측정하는 과제\nImplicit memory (암묵기억) 기억정보를 사용하지만 이를 의식적으로 자각하지 않음.\n의도적으로 기억하려 하지 않아도 기억이 살아나는 것\nProcedural memory (절차기억): 학습된 기술, 자동화된 행동\n기억측정  Recall (회상) 서술형, 빈 칸 채우기, 단답형 Recognition (재인) 선다형, OX문제  🎨 Models 🎨 Multistore model : Atkinson \u0026amp; Shiffrin   Sensory Store\n지속시간: 약 250~300msec 시각적 정보 -\u0026gt; 영사 저장소\n  Short-term Store\n일반적으로 시각적 보다는 청각적으로 저장\n Attention(주의) Rehearsal(되뇌기) Retrieval(인출)    Long-term Store\n용량: 알 수 없음 저장 기간: 알 수 없음\n  Level of processing(LOP) : Craik \u0026amp; Lockhart 처리수준 모형 정보처리 수준의 깊에 따라 연속적 차원에서 일어나는 인지과정 정보처리 수준 깊을 수록 기억/인출의 가능성 높아진다\nWorking Memory Model 작업 기억: 저장(~30sec) + 작업\n저장된 정보를 가지고 조작을 할때, 장기기억에 있는 정보를 끌어와서 저장된 지식을 가지고 조작\n \n 시공간 잡기장 시각장면에서의 대상과 공간적 정보를 처리.\n신속하게 소멸됨. \u0026lt;- 소멸 방지하려면 Rehearsal 음운 회로\n(언어/ 비언어 소리/ 자신이 만들어내는 소리) 정보처리\n-음운저장소 : 정보저장 (~2초) -발성하 되뇌기 : 소리 내지 않고 머리속으로 언어적으로 되뇌기 → 정보 유지 조음 억제: 발성하 되뇌기가 억제 되었을 때 새로운 정보 저장 안되는 현상. 정보 청각적일 때 더 심함 일화 완충기\n최초의 작업기억 모형 제안 이후 약 25년 후 추가된 요소\n청각, 시각, 공간 정보 + 장기기억의 정보 조합, 저장이 되는 요소\n이전에는 연결된적 없는 개념이나 정보들 통합할 수 있도록 하는 기능\n(관련된 신경과학적 연구 아직 거의 없음) 중앙 집행기\n음운회로, 시공간 잡기장, 일화 완충기 및 장기긱억의 정보 통합 (저장하지는 않는다)\n적합한 자극에 초점. 주의 할당, 부정적 자극은 억제\n목표 달성을 위한 계획과 전략 수립\n정보의 변환 및 업데이트\n과제 간의 주의 전환 등의 기능\n뇌구조: 배외측 전전두피질  Multiple Memory System Model : Endel Tulving 두 가지 독립적인 외현기억 시스템 제안\n 의미기억: 세상에 대한 지식. 개인적이거나 특정 시간 맥락에 따르지 않는 사실에 대한 기억 일화기억: 개인적으로 경험한 사건이나 일화 저장. 시간 정보를 포함하고 있는 체계화된 기억  기억체계 분류 : Squire'  기억  선언기억(=서술기억=외현기억)  의미기억 일화기억   비선언기억(=암묵기억)  절차적기억 - 운동, 기술 점화  지각적 의미적   조건형성 비연합학습  습관화 민감화        PDP (병렬분산처리 모형) node 개념 사용\n기억된 정보는 각각의 마디에 존재하는 것이 아니고! 다양한 마디들 간의 연결 방식에 의해 결정된다.\n활성화 확산: 한마디 활성화 → 연결되어 있는 다른 마디도 활성화\n활성화 패턴 반복되면 → 강화되어 지식으로 저장됨\n뉴런과 비슷한 원리 : 뉴런 하나하나에 감정, 기능 저장된 것이 아니라 (뉴런은 활동 일으키거나, 안 일으키거나, 억제되거나 이 3가지이다) 어떤 패턴을 이루고 어떤 패턴으로 활동을 하느냐에 따라 우리 행동 달라진다.\n  PDP model이 잘 설명하는 이론/현상\n작업기억 : 수식을 보고 연산에 대한 규칙 생각해 내는 것. “작업기억은 장기기억의 활성화된 부분을 포함한다”\n점화효과 : 점화자극(연결된 마디를 활성화시키는 마디)→ node 활성화 → 표적자극 나타났을 때 더 빠르게 반응\n  지지 : 인간이 효율적 정보처리를 하는 이유 다수의 처리를 병렬적으로 하기 때문\n  한계 : 인간의 사고과정은 보다 더 체계적 통합적임.\n하향처리 과정 잘 반영하고 있지 않다. (단 한 번의 경험이나 정보 학습으로 일어나는 재인, 회상 설명 불가)\n  ","date":"2019-10-02T22:09:48+09:00","permalink":"https://spongebob03.github.io/p/memory-%EA%B8%B0%EC%96%B5/","title":"Memory 기억"},{"content":" (감각, 저장된 기억, 다른 인지적 과정을 통해) 이용가능한 엄청난 양의 정보로부터 제한된 양의 정보를 집중적으로 처리 할 수 있게 해주는 수단\n 장점 : 한정된 정신적 자원을 효율적으로 사용하게 해준다\n주의 과정의 일부는 의식적 자각 없이도 진행\nConsciousness 의식 외부 세계와 자기 자신의 지각, 이미지, 사고, 기억, 감정에 대해 가지는 자각\n주의 ≠ 의식\n주의 과정 중 통제처리, 초점 주의 등의 유형과 관련\nconscious attention 의식적 주의 상황에 대한 지각. 과거와 현재의 연결 → 미래 행동의 예측과 통제\n  연구 논제1: 자신의 사고 과정을 의식 속으로 가져오는 능력\n의식의 정신 과정에 대한 접근 - 쉽지 않다\n예)내 이름은? 어떻게 그 질문에 답할 수 있었는가? (\u0026hellip;그냥..?)\n  연구 논제2: 사고를 의식으로부터 멀어지게 할 수 있는가?\n의식의 내용을 통제할 수 있나 - 쉽지 않다\n사고 억압 : (예)절대로 백곰에 대해 생각하지 않기\n  연구 논제3: 의식적 자각이 없어도 정보 처리 가능한가?\n Blindsight 맹시\n시각 피질 손상으로 의식적으로는 볼 수 없는 상태\n어떤 대상의 특징을 우연 수준 이상으로 정확하게 묘사하는 시각 장애 유형\n눈(망막)-x→ 시상 but 눈(망막) → 중뇌 → 선조외피질    Preconscious processing 전의식적 처리 의식적 자각 없이 일어나는 정보처리\n인지과정에 이용 가능하지만 의식적 자각 범위 밖에 있는 정보\n당장 사용하지 않지만 필요할 때 불러올 수 있는 정보 포함\nPriming 점화 점화자극 : 의식적 or 전의식적. 표적자극과 동일하거나 유사한 처리를 요구하는 자극\n  정적 점화효과가 있는 경우 반응시간의 단축 관찰됨\n  Marcel\n실험 : 점화자극[ 눈 ] → 표적 자극 [ 입 ] or [ 비 ] 제시 → 날씨인가 신체 일부인가?\n 순간적 점화자극(의식수준 X) → 두 의미 모두 정적 점화 효과 점화자극 (의식수준 O) → 정적점화효과, 부적점화효과\n→ 전의식적 / 의식적 처리 과정에서의 차이를 보여줌. 점화는 자극 처리를 촉진시킬 수도, 방해할 수도    Bowers et al\n두 쌍의 세 단어 실험 : 단어묶음1 단어묶음2 단어제시3 → 어떤 묶음이 서로 관련되고 응집적이며 세번째로 제시된 단어와 관련있는가? 단어제시3에서 어느 단어가 응집적이라고 생각되는 단어 묶음과 관련되는가?\n 결과 : 많은 참가자들이 어느 쪽 단어 묶음이 응집적인 목록인지도 모르고 관련된 세번째 단어 못 찾음. 우연 수준 이상으로 묶음1을 택하긴 함.\n→ 어떤 단어가 묶음1과 관련되는지 의식적으로 떠올리지 못해도 단어묶음1에 있는 단어들은 일관성이 있는 것으로 전의식적 처리가 되었다는 증거.    전의식 -/→ 의식 전의식적 정보를 의식적 수준으로 끌어올리는 것이 쉽지 않을 때도 있다\nTip-of-the-tongue phenomenon 설단현상\n기억에 저장된 정보가 있다는 것을 알지만 인출해서 말할 수 없는 현상\n Brown \u0026amp; McNeill\n실험 : 사전적 정의 들려주고 → 그 의미에 해당되는 단어 보고하도록 → 설단현상 보인 사람들 선택→ 질문 추가  결과 : 대부분 정확하게 반응, 몇 몇은 질문 받는 도중 떠올리는데 성공\n→ 특정 전의식적 정보가 의식적 영역에 들어오지 못하더라도 여전히 주의과정에 이용 가능함을 암시    전의식적 처리 결론 : 의식적 자각이 없어도 다양한 감각자극들을 감지하고 지각하며 반응할 수 있는 경우가 있다. 어떤 종류의 처리에 의식적 자각이 불필요 or 필요? ↓\n   비교 Controlled processing Automatic processing     의도적 노력 필요 불필요   의식적 자각 완전한 자각 요구 대부분 의식적 자각 없이 수행   주의 자원 많이 사용 거의 X   처리 유형 계열적, 순차적 병렬처리   처리 속도 상대적으로 늦다 빠름   과제 친숙하고 숙달. 단순하거나 엄청 연습한 것 낯설고 훈련되지 않은 과제, 변화가 많은 과제   처리수준 상대적으로 깊다 얕다     Automatization 자동화 (=proceduralization 절차화)\n Anderson Integrated components theory\n연습과정 반복 → 노력(의식, 통제) 요구되는 각 단계들 점차 통합 → 하나의 절차 Logan\n지식 축적 → 자동화  Stroop task 수행 어려운 이유\n \u0026lsquo;단어 읽기\u0026rsquo;가 자동화된 과정이기 때문 → 색깔에 집중하는 것 어려움 색에 대한 \u0026lsquo;반응통로\u0026rsquo;의 활성화에 시간이 걸리기 때문\n단어 경로의 방해로\u0026hellip;  Error 자동화 오류   Mistake 실수\n목표 설정 or 목표를 위한 수단 설정에서의 오류\n예) 시험 범위 과소평가 → 주말에 공부 안함 → 망함\n주로 의도적, 통제 처리에서의 오류\n  Slip 깜빡하기, 간과\n목표를 위한 수단 실행에서의 오류\n예) 공부하러 도서관 갔는데 다른책 가져와버림;;\n주로 자동처리에서의 오류와 관련\n자동처리과정 동안 방해 또는 간섭이 있을 때 흔하게 발생\n Types of error (ppt.93) 원인 : 인지체계의 실패, 사람들이 사용하는 시스템의 설계 실패 방지 : 유사한 행동을 요구하는 대상들을 상이한 형태, 색으로 구별되도록 설계    ","date":"2019-09-10T22:09:48+09:00","permalink":"https://spongebob03.github.io/p/attention-%EC%A3%BC%EC%9D%98/","title":"Attention 주의"}]