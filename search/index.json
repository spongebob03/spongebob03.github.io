[{"content":" Hugo-Static Site Generator \nSSG(Static site generator) 중 Hugo를 사용하여 블로그를 만들었다. 처음에 뭐가 뭔지 몰라서 뚱땅뚱땅 만들었다. 호스팅까지 하는데 하루 걸렸고 더 빠르게 할 수 있었지만 역시 세팅에서 시행착오를 겪었다. 그나마 Hugo여서 하루만에 할 수 있었던걸수도\u0026hellip; Hugo는 Go로 만들어져서 나중에 Go에 대해서 더 공부해보고 싶다.\ngithub.io 만들기 Hugo 설치하기 brew install hugo\nhugo version\n사이트 폴더 만들기 hugo new site blog\n테마 붙이기 테그, 카테고리 잘보이는 테마가 안보여서 그나마 stack 테마가 제일 내가 원하는 템플릿이었다.\ncd blog git init git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack config.toml파일 삭제\nGithub 저장소 연결 github.io 블로그를 호스팅하기 위해서는 깃헙 저장소 2개가 필요하다.\n blog: 블로그 컨텐츠 깃헙id.github.io: 빌드된 웹사이트  git remote add origin https://blog_저장소_주소 git submodule add -b main git@github.io_저장소_SSH주소 public ## SSH키 있어야함 블로그 사용하기 themes/exampleSite의 content 폴더 내용을 복사해와서 사용.\n 포스트 생성 hugo new post/포스트제목.md 제목은 title 항목으로 고칠 수 있다.  로컬 서버 확인 hugo server (-D) 웹서버 실행해서 수정사항 확인\nhost on github 공식 문서\n cd blog hugo -t hugo-theme-stack cd public git add . git commit -m \u0026quot;커밋메시지\u0026quot; git push origin main -\u0026gt; 내계정.github.io에 푸시(main이 기본 브랜치명이었다) cd .. git add . git commit -m \u0026quot;커밋메시지\u0026quot; git push origin master -\u0026gt; blog 저장소에 푸시\n쉘 스크립트로 업로드 자동화 deploy.sh에 위에 매번 쓰는 커맨드를 정리 ./deploy.sh \u0026quot;커밋 메시지\u0026quot;\n이후에는 Gist, GithubAction\u0026hellip; 더 편하게 할 수 있는 방법 도전  추가할 사항  utterances로 댓글기능 추가 카테고리 사이드메뉴에 추가 GithubAction으로 자동화 hugo 기능 잘 활용하기 통계기능 추가  참고 자료 Hugo 공식문서 Quick Start\nHugo로 Github.io 블로그 만들기 Hugo theme Stack doc\n초보자 Hugo 블로그 구축기 - 같은 테마를 사용하는 분의 블로그를 찾아서 더 수월했다.\n","date":"2021-12-02T22:09:48+09:00","permalink":"https://spongebob03.github.io/p/hugo%EB%A1%9C-%EA%B0%9C%EB%B0%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%A5%EB%A7%8C%ED%95%98%EA%B8%B0/","title":"Hugo로 개발 블로그 장만하기"},{"content":"1. Content-Based filtering: CB  비슷한 아이템을 기반으로 추천\n  도메인 지식 필요 아이템 간의 유사도 측정하여 추천 모든 이에게 동일한 아이템을 추천 보통 아이템, 사용자 수가 적다 hand-engineered features에서만 성능 좋음 텍스트 처리 필요하기도 함(NLP) - 예.작가의 다른 책  핵심\n 아이템들을 어떤 정보를 기준으로 서술할 건가 유사소 계산 방법 정하기 (코사인, 피어슨\u0026hellip;)  2. Collaborative Filtering: CF  기본적으로 다른 사용자들의 정보를 이용하여 취향 예측\n 1) 메모리 기반 (=Nearest Neighbor based CF) - 👨‍👩‍👧‍👦 사용자 기반 나와 비슷한 평점 패턴을 보이는 사람들을 찾아서 그 사람들이 높게 평가한 아이템 추천\n 나와 다른 사람 어떻게 표현할 것인가 나와 비슷한 사용자를 어떻게 찾을지가 중요  사용자 프로파일 정보 구축 프로파일 정보간의 유사도 계산    - 🎨 아이템 기반 아마존에서 논문으로 발표 유사도 비교 → 평점의 패턴이 비슷한 아이템들을 찾아서 그걸 추천하는 방식 아이템의 수가 보통 사용자 수보다 적다 → 평점의 수가 평균적으로 더 많고 계산량이 작다 → 사용자 기반보다는 덜 sparse → 사용자 기반 협업 필터링과 비교해 더 안정적이며 좋은 성능을 보임\n2) 모델 기반  넷플릭스 프라이즈 컨테스트 때 고안된 추천 방식 사용자 아이템 행렬에서 비어있는 평점들을 SGD를 사용해서 채우는 방식 SVD(Singular Vector Decomposition)을 사용해서 구현  요즘은 딥려닝의 오토인코더를 사용   평점을 포함한 다른 사용자 행동을 예측하는 방식으로 진화  3) 사용자 행동 기반  사용자 행동(아이템 클릭 or 구매 등) 정보를 기반으로 추천  사용자, 아이템에 대한 부가 정보 필수 구현 간단하지만 아주 유용   사용자 행동을 예측하는 추천 (클릭 or 구매)  모델링을 통해 사용자와 아이템 페어에 대한 클릭 확률 등의 점수 계산 가능  의사 결정 트리나 딥러닝등이 사용 가능 유데미에서 사용했던 방식      4) Latent Factor CF 사용자-아이템 평점 행렬 데이터만을 이용해 말 그대로 \u0026lsquo;잠재 요인\u0026rsquo;을 끄집어 내는 것\n Matrix Factorization 우연한 추천 기능  3. 다수의 알고리즘: 다양한 방식 조합 4. 지도학습 방식 어떤 기준으로 추천을 하느냐가 가장 중요 - 머신러닝의 레이블 정보!\n힌트\n 명시적 힌트: 리뷰점수, 좋아요 암시적 힌트: 클릭, 구매, 소비  클릭보다는 구매가 더 좋은 힌트, 소비 여부도 좋은 힌트다 클릭은 노이즈가 있지만 장점은 관심없는 아이템들의 파악이 쉽다 자세한 사용자 행동 정보의 수집, 저장과 가공 먼저 필요    ","date":"2021-11-19T22:09:48+09:00","permalink":"https://spongebob03.github.io/p/%EC%A3%BC%EC%9A%94-%EC%B6%94%EC%B2%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/","title":"주요 추천 알고리즘"},{"content":" 사용자가 관심있어 할만한 아이템을 제공해주는 자동화된 시스템\n  핵심  관심을 어떻게 표현하는가? 관심을 어떻게 측정하는가? =\u0026gt; 유사도 측정    사용자와 아이템  사용자: 서비스를 사용하는 사람 아이템: 서비스에서 판매하는 물품(다른 사용자가 물품이 될 수 있음) 보통 서비스가 성장하면 사용자, 아이템의 수도 같이 성장함  특히 사용자의 성장도가 훨씬 커짐   하지만 아이템의 수가 커지면서 아이템 디스커버리 문제가 대두  모든 사용자가 검색(능동적)을 하지 않으며 사람들이 점점 더 추천(수동적) 선호    필요성  조금의 노력으로 사용자가 관심있어 할만한 아이템을 찾아주는 방법  아이템의 수가 굉장히 큰 경우 더 의미가 있다 수작업으론\u0026hellip;도저히 불가 → 자동화 필요! 개인화(Personalization)으로 연결됨 확증편향의 문제가 있을 수 있다  가끔씩 전혀 관심없을 듯한 아이템도 추천 가능(Serendipity)     회사 관점에서는 추천 엔진을 기반으로 다양한 기능 추가 가능  마케팅시 추천 엔진 사용(이메일 마케팅) 관련 상품 추천으로 쉽게 확장 가능   아이템 수가 많아서 원하는 것을 찾기 쉽지 않은 경우 ⇒ 검색을 위한 수고를 덜어줌 추천을 통해 신상품등의 마케팅이 가능해짐  새로 나온 아이템들은 노출 자체가 어려운데 추천을 통해 기회를 줄 수 있다   인기 아이템 뿐만 아니라 롱 테일의 다양한 아이템 노출이 가능  추천 방식에 따라 다르지만 개인화가 잘 되면 이게 가능해짐    추천은 매칭 문제!  사용자에게 맞는 아이템을 매칭해주기  아이템은 서비스에 따라 달라지며 아이템이 다른 사용자가 될 수도 있음 (친구 추천, 강의 추천\u0026hellip;)   어떤 아이뎀을 추천할 것인가?  다양한 방법이 존재  지금 뜨는 아이템 추천(개인화되어 있지 않음) 사용자가 마지막에 클릭했던 아이템들 다시 추천 사용자가 구매했던 아이템들을 구매한 다른 사용자들이 구매한 아이템 추천 ← 협업 필터링     추천 UI도 굉장히 중요  추천 유닛 존재. 일르 어떤 순서로 어떻게 노출하는지가 중요 구체적인 이유를 보여주는 것이 좋다   사용자와 아이템에 대한 부가 정보들이 필요해짐 아이템 부가 정보  분류 체계 태그 형태로 부가정보를 유지하는 것도 아주 좋음   사용자 프로파일 정보  개인정보: 성별, 연령대 → 콜드 스타트 문제 해결 아이템 정보:  관심 카테고리와 서브 카테고리(분류체계 기반), 태그 클릭 혹은 구매 아이템     무엇을 기준으로 추천을 할 것인가?  일상에서 볼 수 있는 추천  아마존 관련 상품 추천 키보드 샀다면 → 같이 쓸 마우스 추천 넷플릭스 영화, 드라마 추천 이전에 봤던 작품 → 다른 드라마, 영화 추천 추천 타이틀: 이 작품들 왜 추천하는지 구글 검색어 자동 완성 편리, 내가 생각하지 못했던 정보로도 검색할 수 있어서 개인정보 이슈가 있었다 링크드인 or 페이스북 친구 추천  사용자: 멤버 아이템: 멤버 왜 추천하는지 이유를 보여준다   스포티파이 노래, 플레이리스트 추천 헬스케어 도메인의 위험 점수 계산 사용자: 의사, 간호사 아이템: 환자 어느 환자를 먼저 치료하는게 좋은지 점수로 수치화  → 공통점  격자 형태 UI 사용 다양한 종류의 추천 유닛 존재  일부 유닛은 개인화 일부 유닛은 인기도 등 비 개인화 정보기반 추천 유닛의 랭킹 중요  이 부분도 모델링하여 개인화하는 추세 클릭을 최적화하고 이 데이터 수집을 위한 실험을 함  순전히 데이터 수집을 위한 온라인 테스트        ","date":"2021-11-09T22:09:48+09:00","permalink":"https://spongebob03.github.io/p/%EC%B6%94%EC%B2%9C%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%B4%EB%9E%80/","title":"추천시스템이란?"},{"content":" Github) PyTorchKR\n nvm: command not found 노드 버전관리 설치 및 사용법\n find ~/.zshrc로 /.zshrc파일 있는지 확인 open ~/.zshrc 파일 열어서 아래 내용 추가  export NVM_DIR=~/.nvm source $(brew --prefix nvm)/nvm.sh source ~/.zshrc 코드 적용 nvm \u0026ndash;version으로 확인  rbenv: version `2.5.9' is not installed brew install rbenv했지만 [이걸 또 m1이..?] (https://github.com/rbenv/ruby-build/issues/1691) 해결 방법은 간단했습니다. rbenv install 2.5.9\nERROR: While executing gem\u0026hellip;Gem::FilePermissionError Mac에서 Gem::FilePermissionError 에러 발생시 해결 방법 ~/.zshrc 파일에 아래 내용 추가\n[[ -d ~/.rbenv ]] \u0026amp;\u0026amp; \\ export PATH=${HOME}/.rbenv/bin:${PATH} \u0026amp;\u0026amp; \\ eval \u0026quot;$(rbenv init -)\u0026quot; source ~/.zshrc로 코드 적용\nbundle install 에서 make: yarn: No such file or directory npm install -g yarn\n빌드 make serve   멘토님의 친절한 커맨드 예시와 오늘도 구글링으로 얻은 정보들에 감사하며\u0026hellip;🥳\n","date":"2021-08-16T22:09:48+09:00","permalink":"https://spongebob03.github.io/p/%ED%8C%8C%EC%9D%B4%ED%86%A0%EC%B9%98-%ED%97%88%EB%B8%8C-m1-%EB%A1%9C%EC%BB%AC%EC%97%90%EC%84%9C-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B8%B0/","title":"파이토치 허브 M1 로컬에서 빌드하기"},{"content":"스터디에서 4주 동안 배운 알고리즘 유형 문제를 정해진 시간에 풀어보는 모의 코딩테스트를 진행하고 싶었다. 백준 문제를 배운 알고리즘 내에서 랜덤으로 출제하는 슬랙 챗봇을 사용하면 재밌을거 같았다. 백준 사이트는 웹 스크래핑이 금지된다고 공지가 되어있어 solved.ac의 알고리즘 유형 카테고리 정보를 긁어오는 식으로 문제를 뽑아왔다. 혹시 이것도 문제가 되는지 문의해봐야겠다\u0026hellip;\n사용 라이브러리  BeautifulSoup slack_sdk  데이터 긁어오기  \n출제 유형 랜덤 선택, 문제 랜덤 선택 tag의 랜덤 범위가 5인 이유는 5개 알고리즘을 배워서\u0026hellip;  \n슬랙에 텍스트 보내기 Slack api \u0026gt; create app Sending messages 문서 원래 slacker 모듈을 사용했는데 적용이 안되어서 찾아보니 21년부터 slacker는 지원하지 않고 slack_sdk 패키지를 사용하는 것 같다.  \n문제 상황 🤔 백준 사이트는 지나치게 많은 트래픽을 발생시키는 경우에는 사이트 이용이 정지된다고 합니다. 백준 사이트가 아닌 solved.ac의 알고리즘별 문제 목록을 긁어오는 것도 그래서인지 여러번 실행하면 아무 정보가 들어오지 않는다. 하지만 solvedac인데 왜..?\n개선해야할 점 지금 상태는 파이썬 코드를 직접 실행시켜야 슬랙 챗봇이 실행된다. 파이썬 메인함수에서 스터디 기간동안 배운 알고리즘 유형들을 solved.ac에 있는 tag이름으로 찾아서 써줘야한다. 외부에서 간단하게 입력할 수 있었으면 좋겠다. 또한 다른 슬랙 앱처럼 슬랙에서 바로 실행시킬 수 있도록 할 필요가 있다.\n[참고 사이트] https://yganalyst.github.io/web/slackbot1/ https://corikachu.github.io/articles/python/python-slack-bot-slacker https://github.com/os/slacker\nhttps://api.slack.com/authentication/oauth-v2 https://developerdk.tistory.com/96 슬랙커가 안먹히는 이유 https://api.slack.com/methods/chat.postMessage/code https://slack.dev/python-slack-sdk/v3-migration/index.html#from-slackclient-2-x https://pypi.org/project/slack-sdk/\nhttps://pythonrepo.com/repo/slackapi-python-slack-sdk-python-third-party-apis-wrappers\nhttps://github.com/slackapi/python-slack-sdk/issues/561\n","date":"2021-08-08T22:09:48+09:00","permalink":"https://spongebob03.github.io/p/slackbot%EC%9C%BC%EB%A1%9C-%EB%9E%9C%EB%8D%A4-%EB%AC%B8%EC%A0%9C-%EC%B6%9C%EC%A0%9C/","title":"SlackBot으로 랜덤 문제 출제"},{"content":"Homebrew? 그냥 사이트에서 다운받는거랑 뭐가 다른가요?\nmacOS용 패키지 매니저로 프로그램 설치, 업데이트, 삭제를 편하게 관리할 수 있다. (하지만 윈도우만 쓰던 나는 나중에 알았다..)\nM1 네이티브로 설치하려 했으나..실패! 그냥 뭔가 커맨드가 안먹혀서 의문이었는데 기존 MAC을 위한 안내는 기존 실리콘칩. 내 컴퓨터는 m1칩이라 그런 것이었다.\n🛠해결 M1 네이티브로 설치하는 방법도 있으나 이전 맥 터미널과 동일하게 호환할 수 있는 Rosetta를 사용하는 방법이 제일 간단했다.\n 터미널앱 \u0026gt; 정보 가져오기\u0026gt; ☑️ Rosetta를 사용하여 열기 Homebrew 설치 /bin/bash -c \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026quot;  참고\n설치하기 이전에 이걸 봤어야 했는데\u0026hellip;\n","date":"2021-06-08T22:09:48+09:00","permalink":"https://spongebob03.github.io/p/macmini-m1-%EC%97%90%EC%84%9C-homebrew-%EC%84%A4%EC%B9%98/","title":"MacMini M1 에서 Homebrew 설치"}]